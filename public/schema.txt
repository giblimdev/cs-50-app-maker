// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  output          = "../lib/generated/prisma/client"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  USER
  READER
  AUTHOR
  DEV
  ADMIN
}

enum Status {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
  BLOCKED
  CANCELLED
}

// Models
model User {
  id            String   @id @default(uuid())
  name          String?
  email         String?  @unique
  emailVerified Boolean  @default(false)
  image         String?
  role          Role     @default(USER)
  lang          String?  @default("en")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  sessions         Session[]
  accounts         Account[]
  verifications    Verification[]
  projects         Project[]      @relation("ProjectUser")
  createdProjects  Project[]      @relation("ProjectCreator")  // ← AJOUTÉ
  comments         Comment[]      @relation("CommentAuthor")

  @@index([email])
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id @default(uuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id          String    @id @default(uuid())
  name        String
  description String?
  image       String?
  status      Status    @default(TODO)
  priority    Int       @default(1)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  creatorId   String?

  // Relations
  creator  User?     @relation("ProjectCreator", fields: [creatorId], references: [id])  // ← AJOUTÉ
  users    User[]    @relation("ProjectUser")
  comments Comment[]

  @@index([name])
  @@index([status])
}

model Comment {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author   User   @relation("CommentAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  parentComment   Comment?  @relation("CommentHierarchy", fields: [parentCommentId], references: [id])
  parentCommentId String?
  childComments   Comment[] @relation("CommentHierarchy")

  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?

  featureId String?
}
